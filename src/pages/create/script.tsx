import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { FiZap, FiStar } from 'react-icons/fi';
import { HiLightBulb } from 'react-icons/hi';

import { Layout } from '../../components/layout/Layout';
import { Button } from '../../components/common/Button/Button';
import { useVideoCreation } from '../../context/VideoCreationContext';
import { ScriptService } from '../../services/script.service';
import { Script, WikipediaSource } from '../../mockdata/scripts';

export default function ScriptPage() {
  const router = useRouter();
  const { state, setScript, setStep, setScriptStyleTags } = useVideoCreation();
  const [isGenerating, setIsGenerating] = useState(false);
  const [scriptContent, setScriptContent] = useState('');
  const [scriptTitle, setScriptTitle] = useState('');
  const [generatedScript, setGeneratedScript] = useState<Script | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [hasInitialized, setHasInitialized] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [showWikipediaSources, setShowWikipediaSources] = useState(true);
    // Check if we have a topic selected, if not redirect to first step
  useEffect(() => {
    if (!state.selectedTopic && !state.keyword) {
      router.replace('/create');
    }
  }, [state.selectedTopic, state.keyword, router]);  // Reset hasAutoGenerated when topic is selected (to allow regeneration)
  useEffect(() => {
    setHasAutoGenerated(false);
    setHasInitialized(false);
  }, [state.selectedTopic, state.keyword]); // Remove ?.id to trigger on any topic selection

  // Initialize script from state if available
  useEffect(() => {
    if (!hasInitialized) {
      const currentTopic = state.selectedTopic?.title || state.keyword;
      
      if (state.script) {
        // We have an existing script, use it
        setGeneratedScript(state.script);
        setScriptContent(state.script.content);
        setScriptTitle(state.script.title);
        
        // If the script has style tags, set them in context
        if (state.script.styleTags && state.script.styleTags.length > 0) {
          setScriptStyleTags(state.script.styleTags);
        }
      } else if (currentTopic && !isGenerating && !hasAutoGenerated) {
        // No script yet, auto-generate for current topic
        console.log('ðŸš€ Auto-generating script for topic:', currentTopic);
        setHasAutoGenerated(true);
        handleGenerateScript();
      }
      setHasInitialized(true);
    }
  }, [state.script, hasInitialized, state.selectedTopic, state.keyword, hasAutoGenerated, isGenerating]);
  const handleGenerateScript = async () => {
    setIsGenerating(true);
    setError(null);
    
    try {
      const topic = state.selectedTopic?.title || state.keyword;
      const keywords = state.selectedTopic?.keywords || [];
      const styleTags = state.scriptStyleTags || [];
      
      console.log('ðŸš€ Generating script for topic:', topic, 'with keywords:', keywords, 
        'style tags:', styleTags, 'using AI model:', state.selectedAIModel);
      
      const script = await ScriptService.generateScript(topic, keywords, state.selectedAIModel, styleTags);
      
      // Add topic to script for tracking
      const scriptWithTopic = {
        ...script,
        topic: topic || ''
      };
      
      setGeneratedScript(scriptWithTopic);
      setScriptContent(scriptWithTopic.content);
      setScriptTitle(scriptWithTopic.title);
      setScript(scriptWithTopic);
      
      console.log('âœ… Script generated successfully:', scriptWithTopic);
      
    } catch (err) {
      setError('Failed to generate script. Please try again.');
      console.error('Script generation error:', err);
    } finally {
      setIsGenerating(false);
    }
  };
    const handleScriptChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setScriptContent(e.target.value);
    
    // Update script in context
    if (generatedScript) {
      const currentTopic = state.selectedTopic?.title || state.keyword;
      const updatedScript = {
        ...generatedScript,
        content: e.target.value,
        topic: currentTopic || generatedScript.topic,
        styleTags: generatedScript.styleTags || state.scriptStyleTags || []
      };
      setGeneratedScript(updatedScript);
      setScript(updatedScript);
    }
  };
  
  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setScriptTitle(e.target.value);
    
    // Update script title in context
    if (generatedScript) {
      const currentTopic = state.selectedTopic?.title || state.keyword;
      const updatedScript = {
        ...generatedScript,
        title: e.target.value,
        topic: currentTopic || generatedScript.topic,
        styleTags: generatedScript.styleTags || state.scriptStyleTags || []
      };
      setGeneratedScript(updatedScript);
      setScript(updatedScript);
    }
  };
  
  const handleContinue = () => {
    setStep('voice');
    router.push('/create/voice');
  };
  
  const handleBack = () => {
    router.push('/create');
  };
  
  if (isGenerating && !generatedScript) {
    return (
      <Layout>
        <Head>
          <title>Generate Script - VideoAI</title>
        </Head>
        <div className="max-w-3xl mx-auto">
          <div className="bg-white rounded-lg shadow px-6 py-8 text-center">
            <h1 className="text-2xl font-bold text-gray-900 mb-6">Generating Your Script</h1>
            
            <div className="flex flex-col items-center justify-center py-12">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500"></div>
              <p className="mt-4 text-gray-500">
                Our AI ({state.selectedAIModel === 'deepseek' ? 'DeepSeek' : 'Gemini'}) is creating an engaging script based on your topic...
              </p>
              <div className={`mt-2 px-3 py-1 rounded-full text-xs font-medium flex items-center ${
                state.selectedAIModel === 'deepseek'
                  ? 'bg-blue-100 text-blue-800'
                  : 'bg-green-100 text-green-800'
              }`}>
                {state.selectedAIModel === 'deepseek' ? (
                  <>
                    <FiZap className="w-3 h-3 mr-1" />
                    DeepSeek
                  </>
                ) : (
                  <>
                    <FiStar className="w-3 h-3 mr-1" />
                    Gemini
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </Layout>
    );
  }
  
  return (
    <Layout>
      <Head>
        <title>Edit Script - VideoAI</title>
        <meta name="description" content="Edit your AI-generated script" />
      </Head>
      
      <div className="max-w-3xl mx-auto">
        <div className="bg-white rounded-lg shadow px-6 py-8">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Edit Your Script</h1>
          
          {/* AI Model Indicator */}
          <div className="mb-6 flex items-center space-x-2">
            <span className="text-sm text-gray-600">Generated using:</span>
            <span className={`px-3 py-1 rounded-full text-xs font-medium flex items-center ${
              state.selectedAIModel === 'deepseek'
                ? 'bg-blue-100 text-blue-800'
                : 'bg-green-100 text-green-800'
            }`}>
              {state.selectedAIModel === 'deepseek' ? (
                <>
                  <FiZap className="w-3 h-3 mr-1" />
                  DeepSeek
                </>
              ) : (
                <>
                  <FiStar className="w-3 h-3 mr-1" />
                  Gemini
                </>
              )}
            </span>
          </div>
          
          {/* Show selected style tags */}
          {state.scriptStyleTags && state.scriptStyleTags.length > 0 && (
            <div className="mb-6 flex flex-wrap items-center gap-2">
              <span className="text-sm text-gray-600">Style tags:</span>
              {state.scriptStyleTags.map(tag => (
                <span key={tag} className="px-3 py-1 text-xs rounded-full bg-blue-100 text-blue-800 border-blue-300 border">
                  {tag}
                </span>
              ))}
            </div>
          )}
          
          {error && (
            <div className="mb-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              {error}
            </div>
          )}
          
          <div className="mb-6">
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
              Video Title
            </label>
            <input
              type="text"
              id="title"
              value={scriptTitle}
              onChange={handleTitleChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter your video title"
            />
          </div>
          
          <div className="mb-6">
            <div className="flex justify-between items-center mb-1">
              <label htmlFor="script" className="block text-sm font-medium text-gray-700">
                Script Content
              </label>
              <Button 
                variant="outline" 
                size="sm"
                onClick={handleGenerateScript}
                isLoading={isGenerating}
              >
                Regenerate
              </Button>
            </div>
            <textarea
              id="script"
              value={scriptContent}
              onChange={handleScriptChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={10}
              placeholder="Enter your script content"
            />
            <p className="mt-2 text-sm text-gray-500">
              Pro tip: Keep your script concise and to the point for better engagement.
            </p>
          </div>
          
          {error && (
            <div className="mb-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              {error}
            </div>
          )}
          
          {/* Wikipedia Sources Section */}
          {generatedScript?.wikipediaSources && generatedScript.wikipediaSources.length > 0 && (
            <div className="mb-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex justify-between items-center mb-3">
                <h3 className="text-lg font-semibold text-blue-900">
                  ðŸ“š Wikipedia Sources
                </h3>
                <button
                  onClick={() => setShowWikipediaSources(!showWikipediaSources)}
                  className="text-blue-600 hover:text-blue-800 text-sm"
                >
                  {showWikipediaSources ? 'Hide' : 'Show'} Sources
                </button>
              </div>
              
              {showWikipediaSources && (
                <div className="space-y-3">
                  <p className="text-sm text-blue-700 mb-3">
                    The following Wikipedia articles were used to enhance your script content:
                  </p>
                  
                  {generatedScript.wikipediaSources.map((source: WikipediaSource, index: number) => (
                    <div key={index} className="bg-white border border-blue-200 rounded-md p-3">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <h4 className="font-medium text-gray-900 mb-1">
                            {source.title}
                            {source.language && (
                              <span className="ml-2 text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                                {source.language === 'vi' ? 'Vietnamese' : 'English'}
                              </span>
                            )}
                          </h4>
                          <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                            {source.extract}
                          </p>
                          <a 
                            href={source.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-blue-600 hover:text-blue-800 text-sm font-medium inline-flex items-center"
                          >
                            Read more on Wikipedia 
                            <svg className="w-3 h-3 ml-1" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clipRule="evenodd" />
                            </svg>
                          </a>
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {generatedScript.wikipediaTopic && (
                    <div className="text-xs text-blue-600 mt-2">
                      Search strategy: <span className="font-medium">{generatedScript.wikipediaTopic}</span>
                    </div>
                  )}
                  
                  <div className="text-xs text-gray-500 mt-1 flex items-center">
                    <HiLightBulb className="w-3 h-3 mr-1" />
                    These sources were found using AI-powered keyword extraction to enhance your content accuracy.
                  </div>
                </div>
              )}
            </div>
          )}
          
          <div className="flex flex-col md:flex-row md:justify-between gap-4 pt-6 border-t border-gray-200">
            <Button variant="outline" onClick={handleBack} className="px-6 py-2 w-full md:w-auto">
              Back
            </Button>
            <Button 
              onClick={handleContinue}
              disabled={!scriptContent.trim() || !scriptTitle.trim()}
              className="px-6 py-2 w-full md:w-auto"
            >
              Continue to Voice Selection
            </Button>
          </div>
        </div>
      </div>
    </Layout>
  );
}
